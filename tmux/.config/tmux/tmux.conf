# rgb colors support
set -as terminal-overrides ",*:RGB"

# styled underline support
# * <https://dev.to/anurag_pramanik/how-to-enable-undercurl-in-neovim-terminal-and-tmux-setup-guide-2ld7>
# * <https://codeberg.org/dnkl/foot/pulls/1747>
set -as terminal-overrides ',*:Su'
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm,'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# set another shell (e.g. when debugging a dev build of fish)
# set -g default-shell /path/to/shell

set -g history-limit 20000

set -sg escape-time 0

# enable mouse mode (e.g. for scrolling)
set -g mouse on

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# use emacs key bindings in the status line (vi bindings don't fit here)
set -g status-keys emacs

# If off, the client is switched to the most recently active of the remaining sessions
set -g detach-on-destroy off

# When enabled, focus events are requested from the terminal if supported and
# passed through to applications running in tmux.
set -g focus-events on

# source tmux config
unbind r
bind r source-file ~/.config/tmux/tmux.conf

# C-l is overridden by vim-tmux-navigator -> use prefix + C-l
bind C-l send-keys C-l

# use vi keys in copy mode
setw -g mode-keys vi

# The following tmux config file snippet effectively integrates X
# clipboard/selection with the current tmux selection using the program xsel:
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "wl-copy"
bind -T copy-mode-vi Y send -X copy-pipe "wl-copy"
unbind -T copy-mode-vi v
bind -T copy-mode-vi 'v' send -X begin-selection # Begin selection in copy mode.
bind -T copy-mode-vi 'C-v' send -X rectangle-toggle # Begin selection in copy mode.
# use incremental search by default (already default in copy-mode; see https://github.com/tmux/tmux/issues/895)
bind -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""
bind -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""

bind / copy-mode\; command-prompt -p "search up:" "send -X search-backward '%%%'"
# expressions original from https://github.com/tmux-plugins/tmux-copycat
bind C-f copy-mode\; send -X search-backward '(^|^\.|[[:space:]]|[[:space:]]\.|[[:space:]]\.\.|^\.\.)[[:alnum:]~_-]*/[][[:alnum:]_.#$%&+=/@-]*'
bind C-u copy-mode\; send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]*'
bind C-d copy-mode\; send -X search-backward '[[:digit:]]+'
bind M-h copy-mode\; send -X search-backward '\b([0-9a-f]{7,40}|[[:alnum:]]{52}|[0-9a-f]{64})\b'
bind M-i copy-mode\; send -X search-backward '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}'

# sessions
bind C-s switch-client -l # normally "L"

# start new panes/windows in current path
bind h split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind V split-window -h -c "#{pane_current_path}" \; resize-pane -t"{left-of}" -x 30%
bind c new-window -c "#{pane_current_path}"
bind C new-window -c "#{pane_current_path}" \; split-window -h -c "#{pane_current_path}" \; resize-pane -t"{left}" -x 30%

# swap windows
bind -r < swap-window -dt -1
bind -r > swap-window -dt +1

# resizing panes
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

bind Enter display-popup -d "#{pane_current_path}" -E -w'60%' -h'70%'
bind 'C-n' display-popup -E numbat --intro-banner off

bind -n M-j copy-mode \; send-keys -X next-prompt
bind -n M-k copy-mode \; send-keys -X previous-prompt

# https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind -n 'C-\' if-shell "$is_vim" 'send-keys C-\\'  'select-pane -l'
bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l



# ######
# theme:

# Status update interval
set -g status-interval 1

# Basic status bar colors
set -g status-style "fg=#a89984,bg=#3c3836"

# Left side of status bar
set -g status-left-length 30
set -g status-left "#{?client_prefix,#[bg=#d65d0e],#[bg=#a89984]} ðŸ­¦#[fg=#282828,bg=#a89984] #S #[fg=#3c3836]ðŸ­¦"

# Right side of status bar
set -g status-right ""

# Window status
set -g window-status-format "  #{?window_name,#I:#W#F,#I#F}  "
set -g window-status-current-format "#[fg=#504945,bg=#3c3836]ðŸ­¦#[fg=#a89984,bg=#504945] #{?window_name,#I:#W#F,#I#F} #[fg=#3c3836,bg=#504945]ðŸ­¦"

# test: `sleep 2 && printf '\a'` + change window
set -g window-status-bell-style "bg=#3c3836,fg=#fb4934"

# Window separator
set -g window-status-separator ""

# Pane border
set -g pane-border-style "fg=#3c3836,bg=default"

# Active pane border
set -g pane-active-border-style "fg=#665c54,bg=default"

# Pane number indicator
set -g display-panes-colour "#3c3836"
set -g display-panes-active-colour "#d65d0e"

# Message
set -g message-style "fg=#a89984,bg=#3c3836"

# Mode
set -g mode-style "fg=#a89984,bg=#3c3836"

# Search
set -g copy-mode-match-style "fg=#282828,bg=#fabd2f" # also see `copy-mode-current-match-style`
